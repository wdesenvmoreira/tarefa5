{"version":3,"sources":["Components/Thema/globalStyle.js","Components/Thema/light.js","Components/Thema/dark.js","Components/login.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalLayout","createGlobalStyle","theme","body","background","color","text","Login","props","className","type","value","onClick","click","App","useState","isLogin","setLogin","light","thema","setThema","useEffect","dark","inputEntrada","event","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4iCAEO,IAAMA,EAAeC,YAAH,KAEP,qBAAGC,MAAgBC,QAUV,qBAAGD,MAAgBE,cAGtB,qBAAGF,MAAgBG,SAI1B,qBAAGH,MAAgBI,QAQf,qBAAGJ,MAAgBE,cACvB,qBAAGF,MAAgBG,SAMf,qBAAGH,MAAgBG,SACvB,qBAAGH,MAAgBE,cCrCtB,GACVD,KAAM,QACNG,KAAM,QACNF,WAAY,QACZC,MAAM,SCJI,GACVF,KAAM,QACNG,KAAM,QACNF,WAAY,QACZC,MAAM,SCcKE,MAXf,SAAgBC,GAGZ,OACI,gCACI,0DACA,uBAAOC,UAAU,aAAaC,KAAK,OAAOC,MAAM,iBAAiB,wBAAQF,UAAU,eAAeG,QAASJ,EAAMK,MAAhD,yBCkC9DC,MAtCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACGC,EADH,OAEaF,mBAASG,GAFtB,mBAENC,EAFM,KAECC,EAFD,KAqBb,OAjBEC,qBAAU,WAIJD,EAHEJ,EAGOE,EAFAI,KAIX,CAACN,IAYL,qBAAKP,UAAU,MAAf,SACE,eAAC,IAAD,CAAeP,MAAQiB,EAAvB,UACE,cAACnB,EAAD,IAEI,qBAAKS,UAAU,iBAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,CAAOc,cAAY,EAACV,MAfhC,SAAcW,GACJP,GAAUD,GACTQ,EAAMC,8BCZNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c277e854.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalLayout = createGlobalStyle`\r\nbody{\r\n    background: ${({ theme})=> theme.body};\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n    justify-content: center;\r\n    \r\n    .grid-container {\r\n        display: grid;\r\n        grid-tamplate-columns: auto;\r\n        background-color:${({ theme})=> theme.background};\r\n        padding: 10px; \r\n        border-style: solid;\r\n        border-color: ${({ theme})=> theme.color};\r\n    }\r\n\r\n    .grid-item{\r\n        color: ${({ theme})=> theme.text};\r\n        border: 1px rgba(0,0,0,0.8);\r\n        padding: 15px;\r\n        font-size: 30px;\r\n        text-align: center;\r\n    }\r\n\r\n    .input-text{\r\n        background:${({ theme})=> theme.background};\r\n        color: ${({ theme})=> theme.color};\r\n        font-size:4vh;\r\n        height:5vh;\r\n    }\r\n\r\n    .button-click{\r\n        background:${({ theme})=> theme.color};\r\n        color: ${({ theme})=> theme.background};\r\n        font-size:4vh;\r\n        border:0px;\r\n        height:6vh;\r\n    }\r\n\r\n}\r\n`\r\n\r\n","export default{\r\n    body: 'white',\r\n    text: 'black',\r\n    background: \"white\",\r\n    color:\"black\"\r\n}","export default{\r\n    body: 'black',\r\n    text: 'white',\r\n    background: \"black\",\r\n    color:\"white\"\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useState, useEffect} from 'react'\r\n\r\n\r\n\r\n\r\nfunction Login (props){\r\n  \r\n\r\n    return (\r\n        <div>\r\n            <h3>Sign up to my newsletter</h3>\r\n            <input className='input-text' type='text' value='my@email.com' /><button className='button-click' onClick={props.click}>Sign up</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React, { Component, useState, useEffect} from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport { GlobalLayout } from  './Components/Thema/globalStyle'\n\nimport { dark, light } from './Components/Thema/index'\nimport Login from './Components/login'\n\n\n\nfunction App() {\n  const [isLogin, setLogin] = useState('');\n  const [thema, setThema] = useState(light);\n\n    useEffect(()=>{\n        if(!isLogin){\n          setThema(dark)\n        }else{\n          setThema(light)\n        }\n      },[isLogin])\n    \n    \n    function sign(event){\n              setLogin(!isLogin);\n               event.preventDefault();\n               \n          }\n\n\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={ thema }>\n        <GlobalLayout/>\n\n            <div className='grid-container'>\n              <div className='grid-item'>\n                <Login inputEntrada click={sign}/> \n              </div>\n            </div>\n\n\n      </ThemeProvider>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}